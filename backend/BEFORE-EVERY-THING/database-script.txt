-- MySQL Script generated by MySQL Workbench
-- Thu Mar 12 14:14:59 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering


--SET OLD_UNIQUE_CHECKS=UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
--SET OLD_FOREIGN_KEY_CHECKS=FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
--SET OLD_SQL_MODE=SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------


-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE IF NOT EXISTS users (
  userID SERIAL NOT NULL ,
  name VARCHAR NOT NULL,
  surname VARCHAR NOT NULL,
  username VARCHAR NOT NULL,
  password VARCHAR NOT NULL,
  email VARCHAR NOT NULL,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP,
  validation BOOLEAN NOT NULL DEFAULT 'false',
  role INT DEFAULT 1,
  textCount INT DEFAULT 0,
  requestCount INT DEFAULT 0,
  PRIMARY KEY (userID),
  UNIQUE (username),
  UNIQUE (email));

-- -----------------------------------------------------
-- Table `mydb`.`loginLog`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS loginLog (
  logID SERIAL NOT NULL,
  ipAddress VARCHAR NOT NULL,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  os VARCHAR NOT NULL,
  platform VARCHAR NOT NULL,
  browser VARCHAR NOT NULL,
  device_type INT NOT NULL,
  country VARCHAR NOT NULL,
  city VARCHAR NOT NULL,
  userID INT NOT NULL DEFAULT 1,
  PRIMARY KEY (logID),
  CONSTRAINT userID
    FOREIGN KEY (userID)
    REFERENCES users (userID)
    ON DELETE SET DEFAULT
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`systemSetting`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS setting (
  key VARCHAR NOT NULL UNIQUE,
  value INT NOT NULL,
  PRIMARY KEY (key));

-- -----------------------------------------------------
-- Table `mydb`.`forgotPassword`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS forgotPassword (
  forgotID SERIAL NOT NULL,
  hashedKey VARCHAR NOT NULL,
  userID INT NOT NULL,
	status INT DEFAULT 1,
  PRIMARY KEY (forgotID),
  CONSTRAINT userID
    FOREIGN KEY (userID)
    REFERENCES users (userID)
    ON DELETE SET DEFAULT
    ON UPDATE CASCADE);

-- -----------------------------------------------------
-- Table `mydb`.`NERTrainRecord`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS NERTrainRecord (
  recordID SERIAL NOT NULL,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  path VARCHAR,
  PRIMARY KEY (recordID));


-- -----------------------------------------------------
-- Table `mydb`.`author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS author (
  authorID SERIAL NOT NULL,
  authorName VARCHAR NOT NULL,
  mainURL VARCHAR NOT NULL,
  category VARCHAR,
  textCount INT DEFAUlT 0,
  crawl BOOLEAN DEFAULT 'true',
  PRIMARY KEY (authorID));


-- -----------------------------------------------------
-- Table `mydb`.`text`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS text (
  textID uuid DEFAULT uuid_generate_v4 (),
  subURL VARCHAR(128),
  path VARCHAR(128) NOT NULL,
  userID INT DEFAULT 1,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR,
  authorID INT DEFAULT 1,
  tagCount INT DEFAULT 0,
  PRIMARY KEY (textID),
  CONSTRAINT userID
    FOREIGN KEY (userID)
    REFERENCES users (userID)
    ON DELETE SET DEFAULT
    ON UPDATE CASCADE,
  CONSTRAINT author
    FOREIGN KEY (authorID)
    REFERENCES author (authorID)
    ON DELETE SET DEFAULT
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`word`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS word (
  wordID uuid DEFAULT uuid_generate_v4 (),
  textID uuid,
  word VARCHAR NOT NULL,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (wordID),
  CONSTRAINT textID
    FOREIGN KEY (textID)
    REFERENCES text (textID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`tagType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tagType (
  tagTypeID SERIAL NOT NULL,
  tagName VARCHAR UNIQUE,
  tagAlias VARCHAR UNIQUE,
  color VARCHAR(45) UNIQUE,
  PRIMARY KEY (tagTypeID));


-- -----------------------------------------------------
-- Table `mydb`.`tagRecord`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tagRecord (
  tagID uuid DEFAULT uuid_generate_v4 (),
  userID INT NOT NULL DEFAULT 1,
  wordID uuid NOT NULL,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  tagTypeID INT,
  PRIMARY KEY (tagID),
  CONSTRAINT userID
    FOREIGN KEY (userID)
    REFERENCES users (userID)
    ON DELETE SET DEFAULT
    ON UPDATE CASCADE,
  CONSTRAINT wordID
    FOREIGN KEY (wordID)
    REFERENCES word (wordID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT tagTypeID
    FOREIGN KEY (tagTypeID)
    REFERENCES tagType (tagTypeID)
    ON DELETE SET NULL
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`tagCount`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tagCount (
  wordID uuid,
  tagTypeID INT,
  count INT NOT NULL,
  PRIMARY KEY (wordID, tagTypeID),
  CONSTRAINT wordID
    FOREIGN KEY (wordID)
    REFERENCES word (wordID)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT tagTypeID
    FOREIGN KEY (tagTypeID)
    REFERENCES tagType (tagTypeID)
    ON DELETE SET NULL
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`trainExcluded`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS trainExcluded (
  trainRecordID INT NOT NULL,
  key VARCHAR NOT NULL,
  value VARCHAR NOT NULL,
  PRIMARY KEY (trainRecordID, key, value),
  CONSTRAINT record
    FOREIGN KEY (trainRecordID)
    REFERENCES NERTrainRecord (recordID)
    ON DELETE CASCADE
    ON UPDATE CASCADE);



--SET SQL_MODE=@OLD_SQL_MODE;
--SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
--SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

CREATE FUNCTION newTrainRecord() RETURNS trigger AS $newTrainRecord$
	DECLARE
		excluded_records CURSOR FOR SELECT * FROM trainExcluded WHERE trainRecordID = new.recordID - 1;
    BEGIN
		FOR excluded IN excluded_records LOOP
			INSERT INTO trainExcluded (trainRecordID, key, value) VALUES (new.recordID, excluded.key, excluded.value);
		END LOOP;
		RETURN new;
	END;
$newTrainRecord$ LANGUAGE plpgsql;

CREATE TRIGGER newTrainRecord AFTER INSERT ON nerTrainRecord
    FOR EACH ROW EXECUTE PROCEDURE newTrainRecord();


CREATE FUNCTION update_tagCount() RETURNS trigger AS $update_tagCount$
    BEGIN
		IF(TG_OP = 'DELETE') THEN
			UPDATE tagCount SET count = count - 1 WHERE new.wordID = wordID AND new.tagTypeID = tagTypeID;
		ELSE
			IF((SELECT COUNT(*) FROM tagCount WHERE wordID = new.wordID AND tagTypeID = new.tagTypeID) < 1) THEN
				INSERT INTO tagCount (wordid, tagtypeid, count)
				VALUES (new.wordid, new.tagtypeid, 1);
			ELSE
				UPDATE tagCount SET count = count + 1 WHERE new.wordID = wordID AND new.tagTypeID = tagTypeID;
			END IF;
		END IF;
		RETURN new;
	END;
$update_tagCount$ LANGUAGE plpgsql;

CREATE TRIGGER update_tagCount AFTER INSERT OR DELETE ON tagRecord
    FOR EACH ROW EXECUTE PROCEDURE update_tagCount();


CREATE FUNCTION update_textCount() RETURNS trigger AS $update_textCount$
    BEGIN
		UPDATE users SET requestcount = requestcount + 1 WHERE new.userid = userid;
		RETURN new;
	END;
$update_textCount$ LANGUAGE plpgsql;

CREATE TRIGGER update_textCount AFTER INSERT ON text
    FOR EACH ROW EXECUTE PROCEDURE update_textCount();

INSERT INTO users(name, surname, username, password, email, validation,role) VALUES ( 'root', 'root', 'root', 'root', 'root', true,0);

INSERT INTO author(authorname,mainurl,category,crawl) VALUES('root','root','root',false);



INSERT INTO nertrainrecord(path) VALUES ('./classifiers/model1.ser.gz');
INSERT INTO nertrainrecord(path) VALUES ('');
INSERT INTO trainexcluded(trainrecordid, key, value) VALUES (1, 'begin', '1970-01-01 11:17:15.409152+03');


INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'MONEY','MONEY', '#008000');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'PERSON','PERSON', '#0000FF');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'LOCATION','LOCATION', '#45046a');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'ORGANIZATION','ORGANIZATION', '#ff5200');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'PERCENT','PERCENT', '#9a1f40');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'DATE','DATE', '#30475e');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'TIME','TIME', '#512b58');
INSERT INTO tagtype(tagname,tagalias, color) VALUES ( 'O','OTHER', '#FFFFFF');

INSERT INTO setting(key, value) VALUES ('train_day', 7);
INSERT INTO setting(key, value) VALUES ('train_count', 500);
INSERT INTO setting(key, value) VALUES ('last_train_count', 0);